---

- name: Check key variables
  assert:
    that:
    - migrator_namespace|string|length > 0
    - migrator_namespace|string != 'SetMe'
    - migrator_nfs_server|string|length > 0
    - migrator_nfs_server|string != 'SetMe'
    - migrator_nfs_path|string|length > 0
    - migrator_nfs_path|string != 'SetMe'

# The namespace (project),
# the media volume claim
# and a database secret must exist.

- name: Get the namespace
  k8s_info:
    kind: Namespace
    name: "{{ migrator_namespace }}"
  register: n_result

- name: Assert namepsace exists
  assert:
    that: n_result.resources|length == 1

- name: Get the database secrets
  k8s_info:
    kind: Secret
    namespace: "{{ migrator_namespace }}"
    name: database
  register: s_result

- name: Assert database secrets exist
  assert:
    that: s_result.resources|length == 1

# Launch the migrator

- name: Remove any existing migrator Job ({{ migrator_namespace }})
  k8s:
    state: absent
    definition: "{{ lookup('template', 'job.yaml.j2') }}"
    wait: yes

- name: Launching new migrator Job
  k8s:
    definition: "{{ lookup('template', 'job.yaml.j2') }}"
    wait: yes

# Wait for the migrator to complete

- name: Wait for migrator Job
  k8s_info:
    kind: Job
    namespace: "{{ migrator_namespace }}"
    name: nfs-migrator
  register: result
  until: >-
    result.resources[0].status.completionTime is defined
    or result.resources[0].status.failed is defined
  delay: 60
  retries: "{{ (migrator_timeout_minutes|int * 60 / 60)|int }}"

- name: Display migrator Job status
  debug:
    var: result.resources[0].status

- name: Assert migrator Job success
  assert:
    that:
    - result.resources[0].status.succeeded is defined
    - result.resources[0].status.succeeded == 1
    - result.resources[0].status.failed is not defined
